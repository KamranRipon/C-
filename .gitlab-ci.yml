stages:
  - build
  - test

image: tmaier/docker-compose:latest

#services:
#  - docker:dind

variables:
  
  # HTTP_PROXY: "http://10.61.16.6:3128"
  # HTTPS_PROXY: "http://10.61.16.6:3128"

  HTTP_PROXY: "http://wall.lit.hamburg.de:80/"
  HTTPS_PROXY: "http://wall.lit.hamburg.de:80/"

  http_proxy: "http://wall.lit.hamburg.de:80/"
  https_proxy: "http://wall.lit.hamburg.de:80/"

  NO_PROXY: "git.dataport.de,sonarqube.dataport.de,127.0.0.1,minio.gitlab-runner-minio.svc.cluster.local,al.s3.dataport.de,docker:2375,docker:2376,artifactory-extern.dataport.de,http://localhost:80"
  ARTIFACT_ROOT: "dchatbot-docker-development.artifactory-extern.dataport.de"
  IMAGE_PATH: "/conplat/cci/frontend"
  CONTAINER_NAME: "cci-frontend"

  TAG_LATEST: $CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  tag_latest: cci-e2e:latest

  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_URL: "docker.artifactory-extern.dataport.de"

# cache:
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - .npm

before_script:
  # docker informations
  - docker info
  # Setup SSH deploy keys
  # - 'which ssh-agent || ( apt-get install -qq openssh-client )'
  # - eval $(ssh-agent -s)
  # - echo "$SSH_PRIVATE
  # - '[[ -f /.do&& echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  # - docker stack rm $tag_latest
  - docker login -u $CONPLAT_ARTIFACTORY_USER -p $CONPLAT_ARTIFACTORY_PASS $ARTIFACT_ROOT
  - docker-compose up -d

buildJob:
  stage: build
  script:
  #- docker build -t $tag_latest .
  - docker build --no-cache --build-arg HTTP_PROXY=$HTTP_PROXY --build-arg HTTPS_PROXY=$HTTPS_PROXY --build-arg NO_PROXY=$NO_PROXY --build-arg http_proxy=$HTTP_PROXY --build-arg https_proxy=$HTTPS_PROXY --build-arg no_proxy=$NO_PROXY --label built-by=$USER -t $tag_latest .
  #only:
  #- merge_requests
  #  - schedules
  # rules:
  #   - if: '$CI_PIPELINE_SOURCE == "schedule"'
  #     when: always

testJob:
  stage: test
  script:
  - docker stop myContainer && docker rm myContainer
  - docker run -t -d -P -v pwd:/app --name myContainer $tag_latest
  - docker cp myContainer:/app/cypress/results/junit/